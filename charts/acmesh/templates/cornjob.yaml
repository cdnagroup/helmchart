apiVersion: batch/v1
kind: CronJob
metadata:
  name: acme-renew-cronjob
  namespace: {{ .Release.Namespace }}
spec:
  schedule: "{{ .Values.acmesh.cronjobSchedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          dnsPolicy: "None"  # Disable default DNS settings
          dnsConfig:
            nameservers:
            - 1.1.1.1
            searches:
            - default.svc.cluster.local
            - svc.cluster.local
            - cluster.local
            options:
            - name: ndots
              value: "5"
          containers:
          - name: acme-renew
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            env:
            - name: TZ
              value: "Asia/Bangkok"
            {{- if eq .Values.acmesh.env.provider "cloudflare" }}
            - name: CF_Token
              valueFrom:
                secretKeyRef:
                  name: cloudflare-api-token
                  key: CF_Token
            - name: CF_Account_ID
              value: "{{ .Values.acmesh.env.cf.CF_Account_ID }}"
            {{- else if .Values.acmesh.env.or }}
            - name: CF_Email
              value: "{{ .Values.acmesh.env.or.CF_Email }}"
            - name: CF_Global_Key
              value: "{{ .Values.acmesh.env.or.CF_Global_Key }}"
            {{- end }}
            command: ["/bin/sh", "-c"]
            args:
            - |
              acme.sh --register-account -m cdnagroup@gmail.com;
              CCDATE=$(date "+%Y%m%d");
              CCTIME=$(date "+%H%M%S");
              OUTPUT_DIR="/certs/{{ .Values.acmesh.domain }}/current";
              cp -R "/certs/{{ .Values.acmesh.domain }}/current" "/certs/{{ .Values.acmesh.domain }}/${CCDATE}";
              mkdir -p $OUTPUT_DIR;
              echo "starting add renew";
              CMD="ACMERUN=\$(acme.sh --renew -f";

              # Append domain to CMD
              echo add domain : {{ .Values.acmesh.domain }};
              CMD="$CMD -d {{ .Values.acmesh.domain }}";
              CMD="$CMD -d *.{{ .Values.acmesh.domain }}";
                  
              # Append options to CMD
              {{- range .Values.acmesh.options }}
              echo add option : {{ . }}
              CMD="$CMD {{ . }}"
              {{- end }}
                  
              CMD="$CMD --cert-file $OUTPUT_DIR";
              CMD="$CMD --key-file $OUTPUT_DIR";
              CMD="$CMD --ca-file $OUTPUT_DIR";
              CMD="$CMD --fullchain-file $OUTPUT_DIR";
              CMD="$CMD --home $OUTPUT_DIR --cert-home $OUTPUT_DIR )"
              echo "Command : $CMD";
              # Execute the constructed command
              eval $CMD;
              echo "$ACMERUN" > $OUTPUT_DIR/res_renew_$CCTIME.txt;
              cat $OUTPUT_DIR/{{ .Values.acmesh.domain }}_ecc/ca.cer $OUTPUT_DIR/{{ .Values.acmesh.domain }}_ecc/fullchain.cer $OUTPUT_DIR/{{ .Values.acmesh.domain }}_ecc/{{ .Values.acmesh.domain }}.key > $OUTPUT_DIR/{{ .Values.acmesh.domain }}_ecc/{{ .Values.acmesh.domain }}.pem
              cat $OUTPUT_DIR/{{ .Values.acmesh.domain }}_ecc/{{ .Values.acmesh.domain }}.pem
                
            volumeMounts:
            - name: certs-volume
              mountPath: {{ .Values.acmesh.volumes.certsVolume.path }}
          restartPolicy: Never
          volumes:
          - name: certs-volume
            persistentVolumeClaim:
              claimName: {{ .Values.acmesh.volumes.certsVolume.persistentVolumeClaim }}